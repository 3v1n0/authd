#!/usr/bin/make -f
#export DH_VERBOSE = 1

include /usr/share/rustc/architecture.mk

# The package name for authd, used only locally to avoid repetitions
AUTHD_GO_PACKAGE := $(shell grep-dctrl -s XS-Go-Import-Path -n - ./debian/control)

export GOFLAGS := -ldflags=-X=$(AUTHD_GO_PACKAGE)/internal/consts.Version=$(shell dpkg-parsechangelog -S Version) --mod=vendor -buildmode=pie

export DEB_BUILD_MAINT_OPTIONS := optimize=-lto

# Strict symbols checking
export DPKG_GENSYMBOLS_CHECK_LEVEL := 4

# Copy in build directory all content to embed
export DH_GOLANG_INSTALL_ALL := 1

# Use the debian cargo wrapper
export CARGO_PATH := /usr/share/cargo/bin/cargo

# Needed for Rust vendored sources tracking
export DH_CARGO_VENDORED_SOURCES := /usr/share/cargo/bin/dh-cargo-vendored-sources
export CARGO_VENDOR_DIR := $(CURDIR)/vendor_rust

# Needed for Rust configure/build/test stages
export DEB_HOST_GNU_TYPE DEB_HOST_RUST_TYPE
export CARGO_HOME = $(CURDIR)/debian/cargo_home

# Needed by the pam module loader
export AUTHD_PAM_MODULES_PATH = /usr/lib/$(DEB_TARGET_GNU_TYPE)/security

# Skip some tests that rely on external dependencies when building package:
# they need external commands (e.g. `vhs`) that are not available in the build environment.
export AUTHD_SKIP_EXTERNAL_DEPENDENT_TESTS=1

# Defines the targets to be built as part of dh_auto_build
export DH_GOLANG_BUILDPKG := $(AUTHD_GO_PACKAGE)/...

# Run go generate on the targets
export DH_GOLANG_GO_GENERATE := 1

BUILDDIR := $(CURDIR)/obj-$(DEB_HOST_GNU_TYPE)
BUILD_GOPATH := $(BUILDDIR)/src

%:
	dh $@ --buildsystem=golang --with=golang,apport

override_dh_auto_clean:
	dh_auto_clean
	dh_auto_clean --buildsystem=cargo

	# Vendor Go dependencies when building the source package
	[ -d vendor/ ] || go mod vendor

	# Vendor Rust dependencies when building the source package
	[ -d vendor_rust/ ] || debian/vendor-rust.sh

	# Cleanup emtpy cargo-checksum
	rm -f debian/cargo-checksum.json

override_dh_auto_configure:
	dh_auto_configure

	touch debian/cargo-checksum.json
	dh_auto_configure --buildsystem=cargo

override_dh_auto_build:
	# Build the NSS library
	$(CARGO_PATH) build --release

	# Ensure that go can find the pam-moduler tool at generation phase
	# See: https://salsa.debian.org/go-team/packages/dh-golang/-/merge_requests/19
	install vendor/github.com/msteinert/pam/v2/cmd/pam-moduler/moduler.go \
		-Dt $(BUILD_GOPATH)/github.com/msteinert/pam/v2/cmd/pam-moduler

	# Build the daemon and libraries defined in $(DH_GOLANG_BUILDPKG)
	dh_auto_build

override_dh_auto_install:
	dh_auto_install -- --no-source

	/usr/share/cargo/bin/dh-cargo-built-using authd

	# Ignore pam dummy binary
	rm debian/authd/usr/bin/pam

	# Install daemon in /sbin
	mv debian/authd/usr/bin/ debian/authd/usr/sbin

	# Install PAM module configuration
	install -m644 debian/pam-configs/authd \
		-Dt debian/authd/usr/share/pam-configs

	# Install PAM
	install -m644 $(BUILDDIR)/src/$(AUTHD_GO_PACKAGE)/pam/go-loader/pam_go_loader.so \
		-Dt debian/authd/$(AUTHD_PAM_MODULES_PATH)
	install -m644 $(BUILDDIR)/src/$(AUTHD_GO_PACKAGE)/pam/pam_authd.so \
		-Dt debian/authd/$(AUTHD_PAM_MODULES_PATH)

	# Install NSS
	# In Rust, HOST actually refers to the build target (see README.Debian in rustc)
	install -m644 target/$(DEB_HOST_RUST_TYPE)/release/libnss_authd.so \
		debian/authd/usr/lib/$(DEB_TARGET_GNU_TYPE)/libnss_authd.so.2

	# Install systemd units
	mkdir -p debian/authd/lib/systemd/system
	install -m644 systemd/* debian/authd/usr/lib/systemd/system/
