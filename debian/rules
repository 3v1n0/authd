#!/usr/bin/make -f
#export DH_VERBOSE = 1

# Define the go package name
export DH_GOPKG := github.com/ubuntu/authd

export GOCACHE := $(shell mktemp -d --tmpdir -t gocache-XXXX)
export GOPATH := $(shell mktemp -d --tmpdir -t gopath-XXXX)
export GOFLAGS := -ldflags=-X=$(DH_GOPKG)/internal/consts.Version=$(shell dpkg-parsechangelog -S Version) --mod=vendor -buildmode=pie

export DEB_BUILD_MAINT_OPTIONS := optimize=-lto

# Strict symbols checking
export DPKG_GENSYMBOLS_CHECK_LEVEL := 4

# Copy in build directory all content to embed
export DH_GOLANG_INSTALL_ALL := 1

# The following definitions are necessary because of the manual steps
# we need to do to work around some issues with either dh-cargo,
# the wrapper, or cargo
include /usr/share/rustc/architecture.mk
export CARGO_PATH := /usr/share/cargo/bin/cargo

# Needed for Rust vendored sources tracking
export DH_CARGO_VENDORED_SOURCES := /usr/share/cargo/bin/dh-cargo-vendored-sources
export CARGO_VENDOR_DIR = $(CURDIR)/vendor_rust

# Needed for Rust configure/build/test stages
export DEB_HOST_GNU_TYPE DEB_HOST_RUST_TYPE
export CARGO_HOME = $(CURDIR)/debian/cargo_home

# Needed by the pam module loader
export AUTHD_PAM_MODULES_PATH = /usr/lib/$(DEB_TARGET_GNU_TYPE)/security

# Defines the targets to be built as part of dh_auto_build
export DH_GOLANG_BUILDPKG := $(DH_GOPKG)/cmd/authd $(DH_GOPKG)/pam

# Run go generate on the targets
export DH_GOLANG_GO_GENERATE := 1

BUILDDIR = $(CURDIR)/obj-$(DEB_HOST_GNU_TYPE)

%:
	dh $@ --buildsystem=golang --with=golang,apport

override_dh_auto_clean:
	dh_auto_clean
	dh_auto_clean --buildsystem=cargo

	# Vendor Go dependencies when building the source package
	[ -d vendor/ ] || go mod vendor

	# Vendor Rust dependencies when building the source package
	[ -d vendor_rust/ ] || debian/vendor-rust.sh

	rm -f debian/cargo-checksum.json
	chmod +w -R $(GOPATH)
	rm -rf $(GOPATH)

override_dh_auto_configure:
	dh_auto_configure

	touch debian/cargo-checksum.json
	dh_auto_configure --buildsystem=cargo

override_dh_auto_build:
	# Build the NSS library
	$(CARGO_PATH) build --release

	# Build the daemon and libraries defined in $(DH_GOLANG_BUILDPKG)
	dh_auto_build

override_dh_auto_test:
	# We need to specify these Rust related variables to the Go tests in order to build the NSS lib
	# with the cargo wrapper in the integration tests in order to force cargo to use vendored deps
	# instead of querying crates.io for them.
	dh_auto_test

override_dh_auto_install:
	dh_auto_install -- --no-source

	# Ignore pam dummy binary
	rm debian/authd/usr/bin/pam

	# Install daemon in /sbin
	mv debian/authd/usr/bin/ debian/authd/usr/sbin

	# Install PAM module configuration
	install -Dm644 debian/pam-configs/authd debian/authd/usr/share/pam-configs/authd

	# Install PAM
	install -Dm644 $(BUILDDIR)/src/$(DH_GOPKG)/pam/go-loader/pam_go_loader.so \
		debian/authd/$(AUTHD_PAM_MODULES_PATH)/pam_go_loader.so
	install -Dm644 $(BUILDDIR)/src/$(DH_GOPKG)/pam/pam_authd.so \
		debian/authd/$(AUTHD_PAM_MODULES_PATH)/pam_authd.so

	# Install NSS
	# In Rust, HOST actually refers to the build target (see README.Debian in rustc)
	install -Dm644 target/$(DEB_HOST_RUST_TYPE)/release/libnss_authd.so \
		debian/authd/usr/lib/$(DEB_TARGET_GNU_TYPE)/libnss_authd.so.0
