//go:build generate

// TiCS: disabled // This is a helper file to generate the IDs from pkg-config.

// Package main is the package for the ID limits generator.
package main

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strconv"
	"strings"
	"text/template"
)

const outputFile = "idlimits.go"

const idLimitsTemplate = `// Code generated by "{{ .GeneratorName }}"; DO NOT EDIT.
package {{ .PackageName }}

// SystemdSystemUidMax is the systemd-configured value for system_uid_max.
const SystemdSystemUidMax uint32 = {{ .SystemUidMax }}

// SystemdSystemGidMax is the systemd-configured value for system_gid_max.
const SystemdSystemGidMax uint32 = {{ .SystemGidMax }}

// SystemdDynamicUidMin is the systemd-configured value for dynamic_uid_min.
const SystemdDynamicUidMin uint32 = {{ .DynamicUidMin }}

// SystemdDynamicUidMax is the systemd-configured value for dynamic_uid_max.
const SystemdDynamicUidMax uint32 = {{ .DynamicUidMax }}

// SystemdContainerUidBaseMin is the systemd-configured value for container_uid_base_min.
const SystemdContainerUidBaseMin uint32 = {{ .ContainerUidBaseMin }}

// SystemdContainerUidBaseMax is the systemd-configured value for container_uid_base_max.
const SystemdContainerUidBaseMax uint32 = {{ .ContainerUidBaseMax }}
`

type variables struct {
	GeneratorName       string
	PackageName         string
	SystemUidMax        uint32
	SystemGidMax        uint32
	DynamicUidMin       uint32
	DynamicUidMax       uint32
	ContainerUidBaseMin uint32
	ContainerUidBaseMax uint32
}

func getPkgConfigVariable(library, variable string) (string, error) {
	cmd := exec.Command("pkg-config", library, fmt.Sprintf("--variable=%s", variable))
	out, err := cmd.CombinedOutput()
	return strings.TrimSpace(string(out)), err
}

func systemdLimitValue(variable string) uint32 {
	val, err := getPkgConfigVariable("systemd", variable)
	if err != nil {
		log.Fatalf("Error getting pkg-config variable %q: %v", variable, err)
	}

	uintVal, err := strconv.ParseUint(val, 10, 32)
	if err != nil {
		log.Fatalf("Error parsing %q value %q to uint32: %v", variable, val, err)
	}
	return uint32(uintVal)
}

func main() {
	generatorName, err := os.Executable()
	if err != nil {
		log.Fatal(err)
	}

	vars := variables{
		GeneratorName:       filepath.Base(generatorName),
		PackageName:         "users",
		SystemUidMax:        systemdLimitValue("system_uid_max"),
		SystemGidMax:        systemdLimitValue("system_gid_max"),
		DynamicUidMin:       systemdLimitValue("dynamic_uid_min"),
		DynamicUidMax:       systemdLimitValue("dynamic_uid_max"),
		ContainerUidBaseMin: systemdLimitValue("container_uid_base_min"),
		ContainerUidBaseMax: systemdLimitValue("container_uid_base_max"),
	}

	tmpl := template.Must(template.New("idlimits").Parse(idLimitsTemplate))

	file, err := os.OpenFile(outputFile, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0600)
	if err != nil {
		log.Fatalf("Failed to create %s: %v", outputFile, err)
	}
	defer file.Close()

	if err := tmpl.Execute(file, vars); err != nil {
		log.Fatalf("Failed to execute template: %v", err)
	}
}
