//go:build generate

// TiCS: disabled // This is a helper file to generate the IDs from pkg-config.

// Package main is the package for the ID limits generator.
package main

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strconv"
	"strings"
)

const outputFile = "idlimits.go"

func toPascalCase(snakeCaseStr string) string {
	s := strings.Split(snakeCaseStr, "_")
	for index := range s {
		s[index] = strings.Title(strings.ToLower(s[index]))
	}
	return strings.Join(s, "")
}

func getPkgConfigVariable(library, variable string) (string, error) {
	cmd := exec.Command("pkg-config", library, fmt.Sprintf("--variable=%s", variable))
	out, err := cmd.CombinedOutput()
	return strings.TrimSpace(string(out)), err
}

func getSystemdLimitValue(variable string) (uint32, error) {
	val, err := getPkgConfigVariable("systemd", variable)
	if err != nil {
		return 0, err
	}

	uintVal, err := strconv.ParseUint(val, 10, 32)
	if err != nil {
		return 0, err
	}
	return uint32(uintVal), nil
}

func main() {
	idVariables := []string{
		"system_uid_max",
		"system_gid_max",
		"dynamic_uid_min",
		"dynamic_uid_max",
		"container_uid_base_min",
		"container_uid_base_max",
	}

	currentProgram, err := os.Executable()
	if err != nil {
		log.Fatal(err)
	}

	generatedCode := []string{
		fmt.Sprintf("// Code generated by %q; DO NOT EDIT.", filepath.Base(currentProgram)),
		"package users",
		"",
	}

	for _, v := range idVariables {
		id, err := getSystemdLimitValue(v)
		if err != nil {
			log.Fatalf("Failed getting value for %q systemd variable: %v", v, err)
		}

		varName := "Systemd" + toPascalCase(v)
		generatedCode = append(generatedCode,
			fmt.Sprintf("// %s is the Systemd configured Value for %s.", varName, v),
			fmt.Sprintf("const %s uint32 = %d", varName, id),
			"",
		)
	}

	err = os.WriteFile(outputFile, []byte(strings.Join(generatedCode, "\n")), 0600)
	if err != nil {
		log.Fatalf("Failed to write to %s: %v", outputFile, err)
	}
}
